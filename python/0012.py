from math import *
from util import *
from numpy import prod

#######################
# Project Euler #0012 #
# Team Carrot:        #
# Joseph Lee          #
# Benjamin Lee        #
# Stephanie Yu        #
#######################

'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

# Version 01
@profile
def main01():
  for n in xrange(100,100000): # no need to start small
    triangle=(n+1)*(n+2)/2
    factors1=primeFactors(n+1)
    factors2=primeFactors(n+2)
    divisors1=[j+1 for (i,j) in factors1 if i!=2]
    divisors2=[j+1 for (i,j) in factors2 if i!=2]
    divisors3=factorInto(triangle,2)+1
    numDivisors=prod(divisors1+divisors2+[divisors3])
    #print triangle,numDivisors
    if numDivisors>500:
      print n
      break
  printAnswer(triangle)
    
main01()
